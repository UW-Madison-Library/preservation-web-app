=begin
#Preservation Manager Public API

#Public API for the Preservation Manager.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.32
=end

module PreservationManager
  class PreservationManagerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approves a batch for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [ApproveIngestBatchRequest] :body 
    # @return [nil]
    def approve_ingest_batch(opts = {})
      approve_ingest_batch_with_http_info(opts)
      nil
    end

    # Approves a batch for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [ApproveIngestBatchRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def approve_ingest_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.approve_ingest_batch ...'
      end
      # resource path
      local_var_path = '/batch/approve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#approve_ingest_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Approves an object for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [ApproveIngestObjectRequest] :body 
    # @return [nil]
    def approve_ingest_object(opts = {})
      approve_ingest_object_with_http_info(opts)
      nil
    end

    # Approves an object for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [ApproveIngestObjectRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def approve_ingest_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.approve_ingest_object ...'
      end
      # resource path
      local_var_path = '/batch/object/approve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#approve_ingest_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancels a pending job
    # @param [Hash] opts the optional parameters
    # @option opts [CancelJobRequest] :body 
    # @return [nil]
    def cancel_job(opts = {})
      cancel_job_with_http_info(opts)
      nil
    end

    # Cancels a pending job
    # @param [Hash] opts the optional parameters
    # @option opts [CancelJobRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.cancel_job ...'
      end
      # resource path
      local_var_path = '/job/cancel'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#cancel_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new organization
    # Service adminstrator access is required to create an organization.
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrgRequest] :body 
    # @return [nil]
    def create_org(org_name, opts = {})
      create_org_with_http_info(org_name, opts)
      nil
    end

    # Creates a new organization
    # Service adminstrator access is required to create an organization.
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrgRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_org_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.create_org ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.create_org"
      end
      # resource path
      local_var_path = '/org/{orgName}'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#create_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Creates a new vault for an organization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateVaultRequest] :body 
    # @return [nil]
    def create_vault(opts = {})
      create_vault_with_http_info(opts)
      nil
    end

    # Creates a new vault for an organization
    # @param [Hash] opts the optional parameters
    # @option opts [CreateVaultRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_vault_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.create_vault ...'
      end
      # resource path
      local_var_path = '/vault'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#create_vault\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Marks the object as deleted in the database, but does not actually delete any files
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteObjectRequest] :body 
    # @return [nil]
    def delete_object(opts = {})
      delete_object_with_http_info(opts)
      nil
    end

    # Marks the object as deleted in the database, but does not actually delete any files
    # @param [Hash] opts the optional parameters
    # @option opts [DeleteObjectRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.delete_object ...'
      end
      # resource path
      local_var_path = '/object/delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#delete_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets job details
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [DescribeJobResponse]
    def describe_job(job_id, opts = {})
      data, _status_code, _headers = describe_job_with_http_info(job_id, opts)
      data
    end

    # Gets job details
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribeJobResponse, Integer, Hash)>] DescribeJobResponse data, response status code and response headers
    def describe_job_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_job ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling PreservationManagerApi.describe_job"
      end
      # resource path
      local_var_path = '/job/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DescribeJobResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Describes the specified organization and returns the current user's permissions
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [DescribeOrgResponse]
    def describe_org(org_name, opts = {})
      data, _status_code, _headers = describe_org_with_http_info(org_name, opts)
      data
    end

    # Describes the specified organization and returns the current user&#x27;s permissions
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribeOrgResponse, Integer, Hash)>] DescribeOrgResponse data, response status code and response headers
    def describe_org_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_org ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.describe_org"
      end
      # resource path
      local_var_path = '/org/{orgName}'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DescribeOrgResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_org\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the primary contact for the organization.
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [OrganizationContactResponse]
    def describe_org_contact(org_name, opts = {})
      data, _status_code, _headers = describe_org_contact_with_http_info(org_name, opts)
      data
    end

    # Returns the primary contact for the organization.
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrganizationContactResponse, Integer, Hash)>] OrganizationContactResponse data, response status code and response headers
    def describe_org_contact_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_org_contact ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.describe_org_contact"
      end
      # resource path
      local_var_path = '/org/{orgName}/contact'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'OrganizationContactResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_org_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves details about an object version
    # @param vault The vault an object is in
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version The version of an object
    # @return [DescribePreservationObjectResponse]
    def describe_preservation_object(vault, external_object_id, opts = {})
      data, _status_code, _headers = describe_preservation_object_with_http_info(vault, external_object_id, opts)
      data
    end

    # Retrieves details about an object version
    # @param vault The vault an object is in
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :version The version of an object
    # @return [Array<(DescribePreservationObjectResponse, Integer, Hash)>] DescribePreservationObjectResponse data, response status code and response headers
    def describe_preservation_object_with_http_info(vault, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_preservation_object ...'
      end
      # verify the required parameter 'vault' is set
      if @api_client.config.client_side_validation && vault.nil?
        fail ArgumentError, "Missing the required parameter 'vault' when calling PreservationManagerApi.describe_preservation_object"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.describe_preservation_object"
      end
      # resource path
      local_var_path = '/object'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'vault'] = vault
      query_params[:'externalObjectId'] = external_object_id
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DescribePreservationObjectResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_preservation_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Describes a retrieve objects request
    # @param request_id The ID of the request
    # @param [Hash] opts the optional parameters
    # @return [DescribeRetrieveObjectsResponse]
    def describe_retrieve_request(request_id, opts = {})
      data, _status_code, _headers = describe_retrieve_request_with_http_info(request_id, opts)
      data
    end

    # Describes a retrieve objects request
    # @param request_id The ID of the request
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribeRetrieveObjectsResponse, Integer, Hash)>] DescribeRetrieveObjectsResponse data, response status code and response headers
    def describe_retrieve_request_with_http_info(request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_retrieve_request ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling PreservationManagerApi.describe_retrieve_request"
      end
      # resource path
      local_var_path = '/vault/retrieve/{requestId}'.sub('{' + 'requestId' + '}', request_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DescribeRetrieveObjectsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_retrieve_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves details about the current user
    # @param [Hash] opts the optional parameters
    # @return [DescribeUserResponse]
    def describe_user(opts = {})
      data, _status_code, _headers = describe_user_with_http_info(opts)
      data
    end

    # Retrieves details about the current user
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribeUserResponse, Integer, Hash)>] DescribeUserResponse data, response status code and response headers
    def describe_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_user ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DescribeUserResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns details about the vault and the current user's permissions in the vault
    # @param vault The name of the vault
    # @param [Hash] opts the optional parameters
    # @return [DescribeVaultResponse]
    def describe_vault(vault, opts = {})
      data, _status_code, _headers = describe_vault_with_http_info(vault, opts)
      data
    end

    # Returns details about the vault and the current user&#x27;s permissions in the vault
    # @param vault The name of the vault
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribeVaultResponse, Integer, Hash)>] DescribeVaultResponse data, response status code and response headers
    def describe_vault_with_http_info(vault, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.describe_vault ...'
      end
      # verify the required parameter 'vault' is set
      if @api_client.config.client_side_validation && vault.nil?
        fail ArgumentError, "Missing the required parameter 'vault' when calling PreservationManagerApi.describe_vault"
      end
      # resource path
      local_var_path = '/vault/{vault}/describe'.sub('{' + 'vault' + '}', vault.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DescribeVaultResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#describe_vault\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Diffs the batch object against the current state of the object in the preservation system
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [DiffBatchObjectResponse]
    def diff_batch_object(ingest_id, external_object_id, opts = {})
      data, _status_code, _headers = diff_batch_object_with_http_info(ingest_id, external_object_id, opts)
      data
    end

    # Diffs the batch object against the current state of the object in the preservation system
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(DiffBatchObjectResponse, Integer, Hash)>] DiffBatchObjectResponse data, response status code and response headers
    def diff_batch_object_with_http_info(ingest_id, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.diff_batch_object ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.diff_batch_object"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.diff_batch_object"
      end
      # resource path
      local_var_path = '/batch/object/diff'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingestId'] = ingest_id
      query_params[:'externalObjectId'] = external_object_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DiffBatchObjectResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#diff_batch_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Disables job types from being processed
    # @param [Hash] opts the optional parameters
    # @option opts [DisableJobTypesRequest] :body 
    # @return [nil]
    def disable_job_types(opts = {})
      disable_job_types_with_http_info(opts)
      nil
    end

    # Disables job types from being processed
    # @param [Hash] opts the optional parameters
    # @option opts [DisableJobTypesRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def disable_job_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.disable_job_types ...'
      end
      # resource path
      local_var_path = '/job/disable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#disable_job_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Downloads the output of a retrieve job
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_job(job_id, opts = {})
      data, _status_code, _headers = download_job_with_http_info(job_id, opts)
      data
    end

    # Downloads the output of a retrieve job
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def download_job_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.download_job ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling PreservationManagerApi.download_job"
      end
      # resource path
      local_var_path = '/vault/retrieve/download/{jobId}'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#download_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Enables job types from being processed
    # @param [Hash] opts the optional parameters
    # @option opts [EnableJobTypesRequest] :body 
    # @return [nil]
    def enable_job_types(opts = {})
      enable_job_types_with_http_info(opts)
      nil
    end

    # Enables job types from being processed
    # @param [Hash] opts the optional parameters
    # @option opts [EnableJobTypesRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def enable_job_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.enable_job_types ...'
      end
      # resource path
      local_var_path = '/job/enable'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#enable_job_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Marks an executing job as failed. This action can only be completed by a service administrator, and should only be used when a job has a state of executing but is not being executed by a worker.
    # @param [Hash] opts the optional parameters
    # @option opts [CancelJobRequest] :body 
    # @return [nil]
    def fail_job(opts = {})
      fail_job_with_http_info(opts)
      nil
    end

    # Marks an executing job as failed. This action can only be completed by a service administrator, and should only be used when a job has a state of executing but is not being executed by a worker.
    # @param [Hash] opts the optional parameters
    # @option opts [CancelJobRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def fail_job_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.fail_job ...'
      end
      # resource path
      local_var_path = '/job/fail'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#fail_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Counts of all ingest events in the system or organization if specified.
    # @param start_date The starting date for the event counts.
    # @param end_date The ending date for the event counts.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EventType>] :event_type Array of event types.
    # @option opts [Array<EventOutcome>] :event_outcome Array of event outcomes.
    # @option opts [String] :organization_name The ID of the organization.
    # @return [SystemEventCountsResponse]
    def get_ingest_event_counts(start_date, end_date, opts = {})
      data, _status_code, _headers = get_ingest_event_counts_with_http_info(start_date, end_date, opts)
      data
    end

    # Counts of all ingest events in the system or organization if specified.
    # @param start_date The starting date for the event counts.
    # @param end_date The ending date for the event counts.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EventType>] :event_type Array of event types.
    # @option opts [Array<EventOutcome>] :event_outcome Array of event outcomes.
    # @option opts [String] :organization_name The ID of the organization.
    # @return [Array<(SystemEventCountsResponse, Integer, Hash)>] SystemEventCountsResponse data, response status code and response headers
    def get_ingest_event_counts_with_http_info(start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.get_ingest_event_counts ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling PreservationManagerApi.get_ingest_event_counts"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling PreservationManagerApi.get_ingest_event_counts"
      end
      # resource path
      local_var_path = '/system/ingestEventCounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = end_date
      query_params[:'eventType'] = @api_client.build_collection_param(opts[:'event_type'], :csv) if !opts[:'event_type'].nil?
      query_params[:'eventOutcome'] = @api_client.build_collection_param(opts[:'event_outcome'], :csv) if !opts[:'event_outcome'].nil?
      query_params[:'organizationName'] = opts[:'organization_name'] if !opts[:'organization_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SystemEventCountsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#get_ingest_event_counts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Counts of all preservation events in the system or organization if specified.
    # @param start_date The starting date for the event counts.
    # @param end_date The ending date for the event counts.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EventType>] :event_type Array of event types.
    # @option opts [Array<EventOutcome>] :event_outcome Array of event outcomes.
    # @option opts [String] :organization_name The ID of the organization.
    # @return [SystemEventCountsResponse]
    def get_preservation_event_counts(start_date, end_date, opts = {})
      data, _status_code, _headers = get_preservation_event_counts_with_http_info(start_date, end_date, opts)
      data
    end

    # Counts of all preservation events in the system or organization if specified.
    # @param start_date The starting date for the event counts.
    # @param end_date The ending date for the event counts.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EventType>] :event_type Array of event types.
    # @option opts [Array<EventOutcome>] :event_outcome Array of event outcomes.
    # @option opts [String] :organization_name The ID of the organization.
    # @return [Array<(SystemEventCountsResponse, Integer, Hash)>] SystemEventCountsResponse data, response status code and response headers
    def get_preservation_event_counts_with_http_info(start_date, end_date, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.get_preservation_event_counts ...'
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling PreservationManagerApi.get_preservation_event_counts"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling PreservationManagerApi.get_preservation_event_counts"
      end
      # resource path
      local_var_path = '/system/preservationEventCounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'startDate'] = start_date
      query_params[:'endDate'] = end_date
      query_params[:'eventType'] = @api_client.build_collection_param(opts[:'event_type'], :csv) if !opts[:'event_type'].nil?
      query_params[:'eventOutcome'] = @api_client.build_collection_param(opts[:'event_outcome'], :csv) if !opts[:'event_outcome'].nil?
      query_params[:'organizationName'] = opts[:'organization_name'] if !opts[:'organization_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SystemEventCountsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#get_preservation_event_counts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves system wide storage details, including a list of all organizations in the system and their storage details
    # @param [Hash] opts the optional parameters
    # @return [SystemStorageResponse]
    def get_system_storage(opts = {})
      data, _status_code, _headers = get_system_storage_with_http_info(opts)
      data
    end

    # Retrieves system wide storage details, including a list of all organizations in the system and their storage details
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemStorageResponse, Integer, Hash)>] SystemStorageResponse data, response status code and response headers
    def get_system_storage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.get_system_storage ...'
      end
      # resource path
      local_var_path = '/system/storage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'SystemStorageResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#get_system_storage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Ingests the objects in a BagIt bag
    # @param [Hash] opts the optional parameters
    # @option opts [Vault] :vault 
    # @option opts [String] :file 
    # @return [IngestBagResponse]
    def ingest_bag(opts = {})
      data, _status_code, _headers = ingest_bag_with_http_info(opts)
      data
    end

    # Ingests the objects in a BagIt bag
    # @param [Hash] opts the optional parameters
    # @option opts [Vault] :vault 
    # @option opts [String] :file 
    # @return [Array<(IngestBagResponse, Integer, Hash)>] IngestBagResponse data, response status code and response headers
    def ingest_bag_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.ingest_bag ...'
      end
      # resource path
      local_var_path = '/ingest/bag'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['vault'] = opts[:'vault'] if !opts[:'vault'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'IngestBagResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#ingest_bag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists jobs that have a state of EXECUTING
    # @param [Hash] opts the optional parameters
    # @return [ListJobsResponse]
    def list_executing_jobs(opts = {})
      data, _status_code, _headers = list_executing_jobs_with_http_info(opts)
      data
    end

    # Lists jobs that have a state of EXECUTING
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListJobsResponse, Integer, Hash)>] ListJobsResponse data, response status code and response headers
    def list_executing_jobs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_executing_jobs ...'
      end
      # resource path
      local_var_path = '/job/executing'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListJobsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_executing_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists jobs
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [ListJobsResponse]
    def list_jobs(org_name, opts = {})
      data, _status_code, _headers = list_jobs_with_http_info(org_name, opts)
      data
    end

    # Lists jobs
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListJobsResponse, Integer, Hash)>] ListJobsResponse data, response status code and response headers
    def list_jobs_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_jobs ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.list_jobs"
      end
      # resource path
      local_var_path = '/{orgName}/job'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListJobsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all of the vaults in an org along with the user's permissions
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username A user&#x27;s username in the preservation system
    # @return [ListVaultPermissionsResponse]
    def list_org_user_vault_permissions(org_name, opts = {})
      data, _status_code, _headers = list_org_user_vault_permissions_with_http_info(org_name, opts)
      data
    end

    # List all of the vaults in an org along with the user&#x27;s permissions
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username A user&#x27;s username in the preservation system
    # @return [Array<(ListVaultPermissionsResponse, Integer, Hash)>] ListVaultPermissionsResponse data, response status code and response headers
    def list_org_user_vault_permissions_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_org_user_vault_permissions ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.list_org_user_vault_permissions"
      end
      # resource path
      local_var_path = '/vault/{orgName}/permission'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVaultPermissionsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_org_user_vault_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a list of all of the members of an organization
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [ListOrgUsersResponse]
    def list_org_users(org_name, opts = {})
      data, _status_code, _headers = list_org_users_with_http_info(org_name, opts)
      data
    end

    # Retrieves a list of all of the members of an organization
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListOrgUsersResponse, Integer, Hash)>] ListOrgUsersResponse data, response status code and response headers
    def list_org_users_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_org_users ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.list_org_users"
      end
      # resource path
      local_var_path = '/org/{orgName}/user'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListOrgUsersResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_org_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a list of all organizations the authenticated user is an active member of
    # @param [Hash] opts the optional parameters
    # @return [ListUserOrgsResponse]
    def list_user_orgs(opts = {})
      data, _status_code, _headers = list_user_orgs_with_http_info(opts)
      data
    end

    # Retrieves a list of all organizations the authenticated user is an active member of
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListUserOrgsResponse, Integer, Hash)>] ListUserOrgsResponse data, response status code and response headers
    def list_user_orgs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_user_orgs ...'
      end
      # resource path
      local_var_path = '/user/org'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListUserOrgsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_user_orgs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a list of users with read or write permissions for the given vault
    # @param vault The name of the vault
    # @param [Hash] opts the optional parameters
    # @return [ListVaultUsersResponse]
    def list_users_in_vault(vault, opts = {})
      data, _status_code, _headers = list_users_in_vault_with_http_info(vault, opts)
      data
    end

    # Retrieves a list of users with read or write permissions for the given vault
    # @param vault The name of the vault
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListVaultUsersResponse, Integer, Hash)>] ListVaultUsersResponse data, response status code and response headers
    def list_users_in_vault_with_http_info(vault, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_users_in_vault ...'
      end
      # verify the required parameter 'vault' is set
      if @api_client.config.client_side_validation && vault.nil?
        fail ArgumentError, "Missing the required parameter 'vault' when calling PreservationManagerApi.list_users_in_vault"
      end
      # resource path
      local_var_path = '/vault/{vault}/user'.sub('{' + 'vault' + '}', vault.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVaultUsersResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_users_in_vault\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of objects within the vault for which storage problems have been identified
    # @param vault The name of the vault
    # @param [Hash] opts the optional parameters
    # @return [ListVaultProblemsResponse]
    def list_vault_problems(vault, opts = {})
      data, _status_code, _headers = list_vault_problems_with_http_info(vault, opts)
      data
    end

    # Returns a list of objects within the vault for which storage problems have been identified
    # @param vault The name of the vault
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListVaultProblemsResponse, Integer, Hash)>] ListVaultProblemsResponse data, response status code and response headers
    def list_vault_problems_with_http_info(vault, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_vault_problems ...'
      end
      # verify the required parameter 'vault' is set
      if @api_client.config.client_side_validation && vault.nil?
        fail ArgumentError, "Missing the required parameter 'vault' when calling PreservationManagerApi.list_vault_problems"
      end
      # resource path
      local_var_path = '/vault/{vault}/problems'.sub('{' + 'vault' + '}', vault.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVaultProblemsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_vault_problems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Lists all vaults for an organization
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [ListVaultsResponse]
    def list_vaults(org_name, opts = {})
      data, _status_code, _headers = list_vaults_with_http_info(org_name, opts)
      data
    end

    # Lists all vaults for an organization
    # @param org_name The ID of the organization
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListVaultsResponse, Integer, Hash)>] ListVaultsResponse data, response status code and response headers
    def list_vaults_with_http_info(org_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.list_vaults ...'
      end
      # verify the required parameter 'org_name' is set
      if @api_client.config.client_side_validation && org_name.nil?
        fail ArgumentError, "Missing the required parameter 'org_name' when calling PreservationManagerApi.list_vaults"
      end
      # resource path
      local_var_path = '/vault/{orgName}'.sub('{' + 'orgName' + '}', org_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListVaultsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#list_vaults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rejects a batch for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [RejectIngestBatchRequest] :body 
    # @return [nil]
    def reject_ingest_batch(opts = {})
      reject_ingest_batch_with_http_info(opts)
      nil
    end

    # Rejects a batch for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [RejectIngestBatchRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reject_ingest_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.reject_ingest_batch ...'
      end
      # resource path
      local_var_path = '/batch/reject'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#reject_ingest_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rejects an object for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [RejectIngestObjectRequest] :body 
    # @return [nil]
    def reject_ingest_object(opts = {})
      reject_ingest_object_with_http_info(opts)
      nil
    end

    # Rejects an object for ingestion
    # @param [Hash] opts the optional parameters
    # @option opts [RejectIngestObjectRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reject_ingest_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.reject_ingest_object ...'
      end
      # resource path
      local_var_path = '/batch/object/reject'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#reject_ingest_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replicates an object from local storage to a remote
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicateObjectRequest] :body 
    # @return [ReplicateObjectResponse]
    def replicate_object(opts = {})
      data, _status_code, _headers = replicate_object_with_http_info(opts)
      data
    end

    # Replicates an object from local storage to a remote
    # @param [Hash] opts the optional parameters
    # @option opts [ReplicateObjectRequest] :body 
    # @return [Array<(ReplicateObjectResponse, Integer, Hash)>] ReplicateObjectResponse data, response status code and response headers
    def replicate_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.replicate_object ...'
      end
      # resource path
      local_var_path = '/job/replicate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ReplicateObjectResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#replicate_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restores the local copy of an object from a remote source
    # @param [Hash] opts the optional parameters
    # @option opts [RestorePreservationObjectRequest] :body 
    # @return [RestorePreservationObjectResponse]
    def restore_object(opts = {})
      data, _status_code, _headers = restore_object_with_http_info(opts)
      data
    end

    # Restores the local copy of an object from a remote source
    # @param [Hash] opts the optional parameters
    # @option opts [RestorePreservationObjectRequest] :body 
    # @return [Array<(RestorePreservationObjectResponse, Integer, Hash)>] RestorePreservationObjectResponse data, response status code and response headers
    def restore_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.restore_object ...'
      end
      # resource path
      local_var_path = '/job/restore'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'RestorePreservationObjectResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#restore_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves Ingest Batch details
    # @param ingest_id The ID for the Ingest Batch
    # @param [Hash] opts the optional parameters
    # @return [RetrieveBatchResponse]
    def retrieve_batch(ingest_id, opts = {})
      data, _status_code, _headers = retrieve_batch_with_http_info(ingest_id, opts)
      data
    end

    # Retrieves Ingest Batch details
    # @param ingest_id The ID for the Ingest Batch
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveBatchResponse, Integer, Hash)>] RetrieveBatchResponse data, response status code and response headers
    def retrieve_batch_with_http_info(ingest_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch"
      end
      # resource path
      local_var_path = '/batch/{ingestId}'.sub('{' + 'ingestId' + '}', ingest_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveBatchResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves all of the events associated to the batch. This does not include events associated to objects in the batch
    # @param ingest_id The ID for the Ingest Batch
    # @param [Hash] opts the optional parameters
    # @return [RetrieveEventsResponse]
    def retrieve_batch_events(ingest_id, opts = {})
      data, _status_code, _headers = retrieve_batch_events_with_http_info(ingest_id, opts)
      data
    end

    # Retrieves all of the events associated to the batch. This does not include events associated to objects in the batch
    # @param ingest_id The ID for the Ingest Batch
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveEventsResponse, Integer, Hash)>] RetrieveEventsResponse data, response status code and response headers
    def retrieve_batch_events_with_http_info(ingest_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch_events ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch_events"
      end
      # resource path
      local_var_path = '/batch/{ingestId}/event'.sub('{' + 'ingestId' + '}', ingest_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveEventsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves details about an Ingest Batch Object
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [RetrieveBatchObjectResponse]
    def retrieve_batch_object(ingest_id, external_object_id, opts = {})
      data, _status_code, _headers = retrieve_batch_object_with_http_info(ingest_id, external_object_id, opts)
      data
    end

    # Retrieves details about an Ingest Batch Object
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveBatchObjectResponse, Integer, Hash)>] RetrieveBatchObjectResponse data, response status code and response headers
    def retrieve_batch_object_with_http_info(ingest_id, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch_object ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch_object"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.retrieve_batch_object"
      end
      # resource path
      local_var_path = '/batch/object'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingestId'] = ingest_id
      query_params[:'externalObjectId'] = external_object_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveBatchObjectResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves all of the events associated to the object in the batch
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [RetrieveEventsResponse]
    def retrieve_batch_object_events(ingest_id, external_object_id, opts = {})
      data, _status_code, _headers = retrieve_batch_object_events_with_http_info(ingest_id, external_object_id, opts)
      data
    end

    # Retrieves all of the events associated to the object in the batch
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveEventsResponse, Integer, Hash)>] RetrieveEventsResponse data, response status code and response headers
    def retrieve_batch_object_events_with_http_info(ingest_id, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch_object_events ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch_object_events"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.retrieve_batch_object_events"
      end
      # resource path
      local_var_path = '/batch/object/event'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingestId'] = ingest_id
      query_params[:'externalObjectId'] = external_object_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveEventsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch_object_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves a specific file associated to an Ingest Batch Object
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param file_path The object relative path of the file
    # @param [Hash] opts the optional parameters
    # @return [RetrieveBatchObjectFileResponse]
    def retrieve_batch_object_file(ingest_id, external_object_id, file_path, opts = {})
      data, _status_code, _headers = retrieve_batch_object_file_with_http_info(ingest_id, external_object_id, file_path, opts)
      data
    end

    # Retrieves a specific file associated to an Ingest Batch Object
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param file_path The object relative path of the file
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveBatchObjectFileResponse, Integer, Hash)>] RetrieveBatchObjectFileResponse data, response status code and response headers
    def retrieve_batch_object_file_with_http_info(ingest_id, external_object_id, file_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch_object_file ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch_object_file"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.retrieve_batch_object_file"
      end
      # verify the required parameter 'file_path' is set
      if @api_client.config.client_side_validation && file_path.nil?
        fail ArgumentError, "Missing the required parameter 'file_path' when calling PreservationManagerApi.retrieve_batch_object_file"
      end
      # resource path
      local_var_path = '/batch/object/file'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingestId'] = ingest_id
      query_params[:'externalObjectId'] = external_object_id
      query_params[:'filePath'] = file_path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveBatchObjectFileResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch_object_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves the files associated to an Ingest Batch Object
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [RetrieveBatchObjectFilesResponse]
    def retrieve_batch_object_files(ingest_id, external_object_id, opts = {})
      data, _status_code, _headers = retrieve_batch_object_files_with_http_info(ingest_id, external_object_id, opts)
      data
    end

    # Retrieves the files associated to an Ingest Batch Object
    # @param ingest_id The ID for the Ingest Batch
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveBatchObjectFilesResponse, Integer, Hash)>] RetrieveBatchObjectFilesResponse data, response status code and response headers
    def retrieve_batch_object_files_with_http_info(ingest_id, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch_object_files ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch_object_files"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.retrieve_batch_object_files"
      end
      # resource path
      local_var_path = '/batch/object/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingestId'] = ingest_id
      query_params[:'externalObjectId'] = external_object_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveBatchObjectFilesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch_object_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves Ingest Batch Objects
    # @param ingest_id The ID for the Ingest Batch
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of results to include per page (default 20)
    # @option opts [Integer] :page The result page to retrieve, 0 indexed
    # @option opts [String] :has_problems Filter objects by the existence of errors or warnings. WARNINGS returns objects that only have warnings; ERRORS returns any object that has errors.
    # @return [RetrieveBatchObjectsResponse]
    def retrieve_batch_objects(ingest_id, opts = {})
      data, _status_code, _headers = retrieve_batch_objects_with_http_info(ingest_id, opts)
      data
    end

    # Retrieves Ingest Batch Objects
    # @param ingest_id The ID for the Ingest Batch
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The number of results to include per page (default 20)
    # @option opts [Integer] :page The result page to retrieve, 0 indexed
    # @option opts [String] :has_problems Filter objects by the existence of errors or warnings. WARNINGS returns objects that only have warnings; ERRORS returns any object that has errors.
    # @return [Array<(RetrieveBatchObjectsResponse, Integer, Hash)>] RetrieveBatchObjectsResponse data, response status code and response headers
    def retrieve_batch_objects_with_http_info(ingest_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_batch_objects ...'
      end
      # verify the required parameter 'ingest_id' is set
      if @api_client.config.client_side_validation && ingest_id.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_id' when calling PreservationManagerApi.retrieve_batch_objects"
      end
      if @api_client.config.client_side_validation && opts[:'has_problems'] && !['NONE', 'WARNINGS', 'ERRORS'].include?(opts[:'has_problems'])
        fail ArgumentError, 'invalid value for "has_problems", must be one of NONE, WARNINGS, ERRORS'
      end
      # resource path
      local_var_path = '/batch/{ingestId}/objects'.sub('{' + 'ingestId' + '}', ingest_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'hasProblems'] = opts[:'has_problems'] if !opts[:'has_problems'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveBatchObjectsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_batch_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves all of the logs associated with a job
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [RetrieveLogsResponse]
    def retrieve_job_logs(job_id, opts = {})
      data, _status_code, _headers = retrieve_job_logs_with_http_info(job_id, opts)
      data
    end

    # Retrieves all of the logs associated with a job
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveLogsResponse, Integer, Hash)>] RetrieveLogsResponse data, response status code and response headers
    def retrieve_job_logs_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_job_logs ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling PreservationManagerApi.retrieve_job_logs"
      end
      # resource path
      local_var_path = '/job/{jobId}/logs'.sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveLogsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_job_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves all of the events associated with an object
    # @param vault The vault an object is in
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [RetrieveEventsResponse]
    def retrieve_object_events(vault, external_object_id, opts = {})
      data, _status_code, _headers = retrieve_object_events_with_http_info(vault, external_object_id, opts)
      data
    end

    # Retrieves all of the events associated with an object
    # @param vault The vault an object is in
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveEventsResponse, Integer, Hash)>] RetrieveEventsResponse data, response status code and response headers
    def retrieve_object_events_with_http_info(vault, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_object_events ...'
      end
      # verify the required parameter 'vault' is set
      if @api_client.config.client_side_validation && vault.nil?
        fail ArgumentError, "Missing the required parameter 'vault' when calling PreservationManagerApi.retrieve_object_events"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.retrieve_object_events"
      end
      # resource path
      local_var_path = '/object/event'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'vault'] = vault
      query_params[:'externalObjectId'] = external_object_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveEventsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_object_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieves details about what storage problems are affecting an object
    # @param vault The vault an object is in
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [RetrieveObjectStorageProblemsResponse]
    def retrieve_object_storage_problems(vault, external_object_id, opts = {})
      data, _status_code, _headers = retrieve_object_storage_problems_with_http_info(vault, external_object_id, opts)
      data
    end

    # Retrieves details about what storage problems are affecting an object
    # @param vault The vault an object is in
    # @param external_object_id The external ID of the object
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrieveObjectStorageProblemsResponse, Integer, Hash)>] RetrieveObjectStorageProblemsResponse data, response status code and response headers
    def retrieve_object_storage_problems_with_http_info(vault, external_object_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_object_storage_problems ...'
      end
      # verify the required parameter 'vault' is set
      if @api_client.config.client_side_validation && vault.nil?
        fail ArgumentError, "Missing the required parameter 'vault' when calling PreservationManagerApi.retrieve_object_storage_problems"
      end
      # verify the required parameter 'external_object_id' is set
      if @api_client.config.client_side_validation && external_object_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_object_id' when calling PreservationManagerApi.retrieve_object_storage_problems"
      end
      # resource path
      local_var_path = '/object/problems/storage'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'vault'] = vault
      query_params[:'externalObjectId'] = external_object_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RetrieveObjectStorageProblemsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_object_storage_problems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Requests the retrieval of preserved objects
    # @param [Hash] opts the optional parameters
    # @option opts [RetrieveObjectsRequest] :body 
    # @return [RetrieveObjectsResponse]
    def retrieve_objects(opts = {})
      data, _status_code, _headers = retrieve_objects_with_http_info(opts)
      data
    end

    # Requests the retrieval of preserved objects
    # @param [Hash] opts the optional parameters
    # @option opts [RetrieveObjectsRequest] :body 
    # @return [Array<(RetrieveObjectsResponse, Integer, Hash)>] RetrieveObjectsResponse data, response status code and response headers
    def retrieve_objects_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retrieve_objects ...'
      end
      # resource path
      local_var_path = '/vault/retrieve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'RetrieveObjectsResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retrieve_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retries a batch ingest if it has failed
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRetryIngestRequest] :body 
    # @return [nil]
    def retry_batch_ingest(opts = {})
      retry_batch_ingest_with_http_info(opts)
      nil
    end

    # Retries a batch ingest if it has failed
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRetryIngestRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def retry_batch_ingest_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retry_batch_ingest ...'
      end
      # resource path
      local_var_path = '/batch/retryIngest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retry_batch_ingest\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retries a batch replicate if it has failed
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRetryReplicateRequest] :body 
    # @return [nil]
    def retry_batch_replicate(opts = {})
      retry_batch_replicate_with_http_info(opts)
      nil
    end

    # Retries a batch replicate if it has failed
    # @param [Hash] opts the optional parameters
    # @option opts [BatchRetryReplicateRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def retry_batch_replicate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retry_batch_replicate ...'
      end
      # resource path
      local_var_path = '/batch/retryReplicate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retry_batch_replicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retries a failed retrieve job
    # @param request_id The ID of the request
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def retry_retrieve_job(request_id, job_id, opts = {})
      retry_retrieve_job_with_http_info(request_id, job_id, opts)
      nil
    end

    # Retries a failed retrieve job
    # @param request_id The ID of the request
    # @param job_id The ID of the job
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def retry_retrieve_job_with_http_info(request_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.retry_retrieve_job ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling PreservationManagerApi.retry_retrieve_job"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling PreservationManagerApi.retry_retrieve_job"
      end
      # resource path
      local_var_path = '/vault/retrieve/{requestId}/retry/{jobId}'.sub('{' + 'requestId' + '}', request_id.to_s).sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#retry_retrieve_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Search for batches
    # @param [Hash] opts the optional parameters
    # @option opts [String] :org_name The ID of the organization
    # @option opts [Array<String>] :vault The vault an object is in
    # @option opts [Array<String>] :state The state the batch is in
    # @option opts [Integer] :page_size The number of results to include per page (default 20)
    # @option opts [Integer] :page The result page to retrieve, 0 indexed
    # @return [BatchSearchResponse]
    def search_batches(opts = {})
      data, _status_code, _headers = search_batches_with_http_info(opts)
      data
    end

    # Search for batches
    # @param [Hash] opts the optional parameters
    # @option opts [String] :org_name The ID of the organization
    # @option opts [Array<String>] :vault The vault an object is in
    # @option opts [Array<String>] :state The state the batch is in
    # @option opts [Integer] :page_size The number of results to include per page (default 20)
    # @option opts [Integer] :page The result page to retrieve, 0 indexed
    # @return [Array<(BatchSearchResponse, Integer, Hash)>] BatchSearchResponse data, response status code and response headers
    def search_batches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.search_batches ...'
      end
      if @api_client.config.client_side_validation && opts[:'state'] && !opts[:'state'].all? { |item| ['RECEIVED', 'ANALYZING', 'ANALYSIS_FAILED', 'PENDING_REVIEW', 'PENDING_INGESTION', 'PENDING_REJECTION', 'INGESTING', 'INGEST_FAILED', 'REPLICATING', 'REPLICATION_FAILED', 'COMPLETE', 'REJECTING', 'REJECTED', 'DELETED'].include?(item) }
        fail ArgumentError, 'invalid value for "state", must include one of RECEIVED, ANALYZING, ANALYSIS_FAILED, PENDING_REVIEW, PENDING_INGESTION, PENDING_REJECTION, INGESTING, INGEST_FAILED, REPLICATING, REPLICATION_FAILED, COMPLETE, REJECTING, REJECTED, DELETED'
      end
      # resource path
      local_var_path = '/batch/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orgName'] = opts[:'org_name'] if !opts[:'org_name'].nil?
      query_params[:'vault'] = @api_client.build_collection_param(opts[:'vault'], :csv) if !opts[:'vault'].nil?
      query_params[:'state'] = @api_client.build_collection_param(opts[:'state'], :csv) if !opts[:'state'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'BatchSearchResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#search_batches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Updates a user's permissions on a vault. Any existing permissions are overwritten. An empty permission list removes all permissions for the vault.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserVaultPermissionsRequest] :body 
    # @return [nil]
    def update_user_vault_permissions(opts = {})
      update_user_vault_permissions_with_http_info(opts)
      nil
    end

    # Updates a user&#x27;s permissions on a vault. Any existing permissions are overwritten. An empty permission list removes all permissions for the vault.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateUserVaultPermissionsRequest] :body 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_user_vault_permissions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.update_user_vault_permissions ...'
      end
      # resource path
      local_var_path = '/user/vault'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#update_user_vault_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validates the local copy of an object
    # @param [Hash] opts the optional parameters
    # @option opts [ValidatePreservationObjectRequest] :body 
    # @return [ValidatePreservationObjectResponse]
    def validate_object(opts = {})
      data, _status_code, _headers = validate_object_with_http_info(opts)
      data
    end

    # Validates the local copy of an object
    # @param [Hash] opts the optional parameters
    # @option opts [ValidatePreservationObjectRequest] :body 
    # @return [Array<(ValidatePreservationObjectResponse, Integer, Hash)>] ValidatePreservationObjectResponse data, response status code and response headers
    def validate_object_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.validate_object ...'
      end
      # resource path
      local_var_path = '/job/validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ValidatePreservationObjectResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#validate_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validates a remote copy of an object
    # @param [Hash] opts the optional parameters
    # @option opts [ValidateObjectRemoteRequest] :body 
    # @return [ValidateObjectRemoteResponse]
    def validate_object_remote(opts = {})
      data, _status_code, _headers = validate_object_remote_with_http_info(opts)
      data
    end

    # Validates a remote copy of an object
    # @param [Hash] opts the optional parameters
    # @option opts [ValidateObjectRemoteRequest] :body 
    # @return [Array<(ValidateObjectRemoteResponse, Integer, Hash)>] ValidateObjectRemoteResponse data, response status code and response headers
    def validate_object_remote_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PreservationManagerApi.validate_object_remote ...'
      end
      # resource path
      local_var_path = '/job/validateRemote'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ValidateObjectRemoteResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PreservationManagerApi#validate_object_remote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
